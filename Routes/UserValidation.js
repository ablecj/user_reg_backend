import express from 'express';
import User from '../Models/userValidationSchema.js';
import nodemailer from 'nodemailer';


const router = express.Router();






// for nodemailer
const transporter = nodemailer.createTransport({
  service: 'gmail',
  auth: {
      user: 'gracyebin7@gmail.com',
      pass: 'eivw ckit vfpy qsuz'
  },
  tls: {
      rejectUnauthorized: false // Disables certificate verification
  }
});

// storing the otp generated by the sendotp function work
let otpStorage = {}; 

// test route
router.get('/test', (req,res) => {
    res.json({
        message: 'User API Working successfully !'
    })
});

// backend route for saving the user to the database 
router.post('/validatePhone', async (req, res) => {
  const { formData } = req.body;
  console.log(formData, "formdata from backend!");

  try {
    // Check if the user with the given email already exists
    const existingUser = await User.findOne({ email: formData.email });

    if (existingUser) {
      // Respond if the user already exists
      return res.status(400).send({ message: "User already exists !" });
    }

    // Create a new User instance with the extracted data
    const newUser = new User({
      name: formData.name,
      dob: formData.dob,
      email: formData.email,
      phone: formData.phone
    });

    // Save the new user to the database
    await newUser.save();

    // Respond with a success message
    res.status(200).json({ message: 'Data saved successfully!' });

  } catch (error) {
    // Respond with an error message
    res.status(500).json({ error: 'Error saving data', details: error.message });
  }
});


// rout for fetching the data
router.get('/getUserData', async(req,res)=> {
  try {
    const email = req.headers['authorization']?.split('Bearer ')[1];
    
    if (!email) {
      return res.status(400).json({ error: 'Email not provided' });
    }

      // Query the database for the user with the given email
      const user = await User.findOne({ email: email });
    
      if (user) {
        // Return user data excluding sensitive information
        res.json({
          email: user.email,
          phone: user.phone,
        });
      }else {
        res.status(404).json({ error: 'User not found' });
      }
  } catch (error) {
    res.status(500).json({ error: 'Internal Server Error' });
  }
});


// route for sending otp to the frontend 
router.post('/sendemailotp', (req,res)=> {
  const { email } = req.body; 
  console.log({email})
  // console.log(req.body, "req.body from frontend");
  const otp = Math.floor(100000 + Math.random()* 900000);

  otpStorage[email] = otp;

  try {
    const mailOptions = {
      from: process.env.COMPANY_EMAIL,
      to: email,
      subject: 'OTP for verification',
      text: `your otp for verificstion is ${otp}`
   }   

   transporter.sendMail(mailOptions, async(err, info)=>{
      if (err) {
        console.log(err);
        res.status(500).json({message: "otp sending failed !"})
      } else {
        res.status(200).json({otp})
      }
   })

  } catch (error) {
    res.status(404).json('error occured when otp send !')
  }

});


// Route for verifying OTP
router.post('/verifyotp', async (req, res) => {
  const { email, otp } = req.body;

  // Check if the OTP matches and is not expired
  if (otpStorage[email] && otpStorage[email] === parseInt(otp, 10)) {
    try {
      const updatedUser = await User.findOneAndUpdate(
        { email: email },
        { isEmailVerified: true },
        { new: true }
      );

 

      delete otpStorage[email]; // Remove OTP after successful verification

      if (updatedUser) {
        res.status(200).json({ message: 'OTP verified successfully!' });
      } else {
        res.status(400).json({ message: 'User not found!' });
      }
    } catch (error) {
      res.status(500).json({ message: 'Internal server error!' });
    }
  } else {
    res.status(400).json({ message: 'Invalid OTP or OTP expired!' });
  }
});

// route for gst verification

router.post('/verify-gst', async (req, res) => {
  const { gst, email } = req.body;
  console.log({ gst }, "gstNumber!");

  const url = 'https://gst-verification.p.rapidapi.com/v3/tasks/sync/verify_with_source/ind_gst_certificate';
  const options = {
    method: 'POST',
    headers: {
      'x-rapidapi-key': process.env.GST_API_KEY,
      'x-rapidapi-host': process.env.GST_API_HOST,
      'Content-Type': 'application/json'
    },
    body: JSON.stringify({
      task_id: '74f4c926-250c-43ca-9c53-453e87ceacd1',
      group_id: '8e16424a-58fc-4ba4-ab20-5bc8e7c3c41e',
      data: {
        gstin: gst
      }
    })
  };

  try {
    const response = await fetch(url, options);
    if (!response.ok) {
      // Handle non-2xx status codes
      throw new Error(`Failed to fetch: ${response.status} ${response.statusText}`);
    }

    const result = await response.json();
    // Check if GSTIN status is 'Active'
    const gstinStatus = result?.result?.source_output?.gstin_status;
    if (gstinStatus === 'Active') {
      // Update the user's GST information in the database
      const updatedUser = await User.findOneAndUpdate(
        { email },  // Find user by email
        {
          gstin: gst,
          isGstVerified: true
        },
        { new: true } // Return the updated document
      );

      if (updatedUser) {
        return res.status(200).json({
          message: 'GST number verified and updated successfully.',
          user: updatedUser
        });
      } else {
        return res.status(404).json({ error: 'User not found' });
      }
    } else {
      return res.status(400).json({ error: 'GST number is not active' });
    }
  } catch (error) {
    res.status(500).json({ error: 'Failed to verify GST number' });
  }
});

// route for verify the bank account

const API_KEY = process.env.BANK_ACC_KEY;
const API_HOST = process.env.BANK_ACC_HOST;

// Endpoint to verify bank account
router.post('/verify-bank-account', async (req, res) => {
  const { ACC, ifsc } = req.body;
  console.log(ACC, ifsc, "acc and ifsc")
  const url = `https://${API_HOST}/v3/tasks/async/verify_with_source/validate_bank_account`;
  const options = {
    method: 'POST',
    headers: {
      'x-rapidapi-key': API_KEY,
      'x-rapidapi-host': API_HOST,
      'Content-Type': 'application/json'
    },
    body: JSON.stringify({
      task_id: '123',
      group_id: '1234',
      data: {
        bank_account_no: ACC,
        bank_ifsc_code: ifsc
      }
    })
  };

  try {
    const response = await fetch(url, options);
    const result = await response.json();
    res.status(200).json(result);
  } catch (error) {
    res.status(500).send('Server error during bank account verification.');
  }
});

// Endpoint to get verification result
router.get('/get-verification-result', async (req, res) => {
  const requestId = req.query.request_id;
  const email = req.query.email; // Retrieve email from query parameters

  if (!email) {
    return res.status(400).send('Email not provided.');
  }

  const url = `https://${API_HOST}/v3/tasks?request_id=${requestId}`;
  const options = {
    method: 'GET',
    headers: {
      'x-rapidapi-key': API_KEY,
      'x-rapidapi-host': API_HOST
    }
  };

  try {
    const response = await fetch(url, options);
    const result = await response.json();

    if (result && result.length > 0) {
      const bankAccountNumber = result[0].result.bank_account_number;
      const isVerified = result[0].status === 'completed';

      // Find user by email and update account number and verification status
      await User.findOneAndUpdate(
        { email: email },
        { accountNo: bankAccountNumber, isAccountVerified: isVerified },
        { new: true } // Return the updated document
      );

      res.status(200).json(result);
    } else {
      res.status(404).send('No result found for the provided request ID.');
    }
  } catch (error) {
    res.status(500).send('Server error getting verification result.');
  }
});

router.get('/postoffices', async (req, res) => {
  const pincode = req.query.pincode;
  const email = req.query.email;

  if (!pincode) {
    return res.status(400).json({ error: 'Pincode is required' });
  }

  const url = `https://india-pincode-with-latitude-and-longitude.p.rapidapi.com/api/v1/pincode/${pincode}`;
  const options = {
    method: 'GET',
    headers: {
      'x-rapidapi-key': process.env.POST_KEY, // Use environment variable for the API key
      'x-rapidapi-host': process.env.POST_HOST // Use environment variable for the API host
    }
  };

  try {
    const response = await fetch(url, options);
    if (!response.ok) {
      return res.status(response.status).json({ error: response.statusText });
    }

    const data = await response.json();

    // Assuming the new API's data structure is similar; adjust accordingly if not
    const firstPostOffice = data[0];
    const updateData = {
      pincode: firstPostOffice.pincode,
      city: firstPostOffice.office_name,
      district: firstPostOffice.division_name,
      state: firstPostOffice.circle_name
    };

    // Find the user by email and update their data
    const updatedUser = await User.findOneAndUpdate(
      { email: email },
      { $set: updateData },
      { new: true } // Return the updated document
    );

    res.status(200).json(data);
  } catch (error) {
    res.status(500).json({ error: 'Failed to fetch data from the API' });
  }
});

// route for verifying aadhar 
router.post('/verify-aadhar', async (req, res) => {
  try {
    const { Aadhar, email } = req.body;

    if (!email) {
      return res.status(401).json({ message: 'Unauthorized: No email found in session', data: false });
    }

    const url = 'https://api.apyhub.com/validate/aadhaar';
    const options = {
      method: 'POST',
      headers: {
        'apy-token': process.env.Aadhar_Token,
        'Content-Type': 'application/json',
      },
      body: JSON.stringify({ aadhaar: Aadhar }),
    };

    const controller = new AbortController();
    const timeout = setTimeout(() => {
      controller.abort();
    }, 10000);

    try {
      const response = await fetch(url, { ...options, signal: controller.signal });
      clearTimeout(timeout);

      const result = await response.json();

      if (response.ok && result.data) { // Check if the API call was successful and result.data is true
        const updatedUser = await User.findOneAndUpdate(
          { email },
          { $set: { Aadhar } },
          { new: true }
        );

        if (updatedUser) {
          res.status(200).json({ message: 'Aadhar verified and data saved successfully', data: true });
        } else {
          res.status(404).json({ message: 'User not found', data: false });
        }
      } else {
        res.status(400).json({ message: 'Invalid Aadhar number or verification failed', data: false, details: result });
      }
    } catch (error) {
      if (error.name === 'AbortError') {
        res.status(408).json({ message: 'Request timed out', data: false });
      } else {
        res.status(500).json({ message: 'An error occurred during verification', data: false, error: error.message });
      }
    }
  } catch (error) {
    res.status(500).json({ message: 'An error occurred during verification', data: false, error: error.message });
  }
});


// route for handling the pan details 
router.post('/verify-pan', async(req,res)=> {
  const { PAN, email } = req.body;

  if (!PAN || !email) {
    return res.status(400).json({ message: 'PAN and email are required.' });
  }

  const url = 'https://pan-card-verification1.p.rapidapi.com/v3/tasks/sync/verify_with_source/ind_pan';
  const options = {
    method: 'POST',
    headers: {
      'x-rapidapi-key': process.env.PAN_KEY, 
      'x-rapidapi-host': process.env.PAN_HOST,
      'Content-Type': 'application/json',
    },
    body: JSON.stringify({
      task_id: '74f4c926-250c-43ca-9c53-453e87ceacd1',
      group_id: '8e16424a-58fc-4ba4-ab20-5bc8e7c3c41e',
      data: {
        id_number: PAN,
      },
    }),
  };

  try {
    const response = await fetch(url, options);
    const result = await response.json();

    if (response.ok && result?.status === 'success') { // Adjust this check according to the actual API response
      // Perform the database operation to save the PAN number using the email from the session
      const updatedUser = await User.findOneAndUpdate(
        { email }, // Find the user by email
        { $set: { PAN } }, // Update the PAN field
        { new: true } // Return the updated document
      );

      if (updatedUser) {
        res.status(200).json({ message: 'PAN verified and data saved successfully' });
      } else {
        res.status(404).json({ message: 'User not found' });
      }
    } else {
      res.status(400).json({ message: 'Invalid PAN number or verification failed', details: result });
    }
  } catch (error) {
    res.status(500).json({ message: 'An error occurred during verification.', error: error.message });
  }
});


export default router
